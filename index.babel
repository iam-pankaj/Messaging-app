//Data
var data = {
    baseURL: "https://day-7-messaging.firebaseio.com/",
    profileImage: "https://pbs.twimg.com/media/Diz0a9BWAAEol5v.jpg",
    messages: {},
    prevChats: [
      {
        lastText: "",
        sender: {
          name: "Public Chatroom",
          profileImage: "https://zephyo.github.io/22Days/code/7/graphics/users.svg"
        }
      },
      {
        lastText: "Hey, wanna get boba? ðŸ˜Š I found a really cool place that u might like",
        sender: {
          name: "Madie ðŸ’—",
          profileImage: "https://pbs.twimg.com/media/DiPs3H7V4AAvnmT.jpg"
        }
      },
      {
        lastText: "k I'm off to procure sustenance",
        sender: {
          name: "best bench",
          profileImage: "https://pbs.twimg.com/media/Ds89x98UUAA_7xY.jpg"
        }
      },
      {
        lastText: "Lia sent a photo.",
        sender: {
          name: "Lia",
          profileImage: "https://pbs.twimg.com/media/DupPZcMXgAY339e.jpg"
        }
      }
    ]
  },
  msgName = "messages",
  // My database - on the free plan
  config = {
    apiKey: "AIzaSyBnWbqZC0wncY06pWlHX8DCbIM_EM9zrE8",
    authDomain: "day-7-messaging.firebaseapp.com",
    databaseURL: "https://day-7-messaging.firebaseio.com",
    projectId: "day-7-messaging",
    storageBucket: "day-7-messaging.appspot.com",
    messagingSenderId: "307150346579"
  };

firebase.initializeApp(config);

//Components

//App Container
class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = data;
  }

  componentWillMount() {
    this.setState({
      firebaseRef: firebase.database().ref(msgName),
    }, this.update);
  }
  
  update = () =>
  {    
    this.state.firebaseRef.on("value", 
                              (snapshot) => {
      this.setState({
        messages: snapshot.val()
      }, ()=>{
        if (this.state.messages)
       {
           var last = Object.keys(this.state.messages)[Object.keys(this.state.messages).length-1];
          var prev = this.state.prevChats;
          prev[0].lastText =  this.state.messages[last].message;
         this.setState({
           prevChats: prev
         });
          this.scrollWindow();
       }
      });
    });
  }

  login = () => {
    var user = {
      name: $("#name").val(),
      email: $("#email").val()
    };
    if (user.name && user.email) {
      this.setState({ thisUser: user });
    }
  };

  handleSubmit = () => {
    var value = $(".messageInput").val();
    if (value.length === 0) {
      
      return;
    }
    var message = {
      sender: this.state.thisUser,
      message: value
    };

    this.postMessage(message);
    $(".messageInput").val("");
  };

  postMessage(message) {
    // Get a key for a new Post.
    var newPostRef = this.state.firebaseRef.push();

    newPostRef.set(message, this.scrollWindow);
  }

  scrollWindow = () => {
    var windowHeight = $(".Messages").height();
    $(".container").animate(
      { scrollTop: $(".container")[0].scrollHeight },
      500
    );
  }

  render() {
    return (
      <div className="App">
        <Conversation
          messages={this.state.messages}
          recipient={this.state.recipient}
          onSubmit={this.handleSubmit}
          thisUser={this.state.thisUser}
        />
        <Profile
          thisUser={this.state.thisUser}
          prevChats={this.state.prevChats}
          profileImage={this.state.profileImage}
        />
       {!this.state.thisUser ? <LoginForm login={this.login} /> : null}
      </div>
    );
  }
}

const LoginForm = props => {
  return (
    <div className="LoginForm">
      <div className="sign-up">
        <h1>SIGN UP</h1>
        <div className="input"><input id="name" type="text" placeholder="Name" /><i data-feather="user" /></div>
        <div className="input"><input id="email" type="email" placeholder="Email" /><i data-feather="mail" /></div>
        <button onClick={props.login}>LET'S CHAT!</button>
      </div>
    </div>
  );
};

//Conversation
class Conversation extends React.Component {
   constructor(props) {
    super(props);
  }
  
  onChange = () => {
    if ($('.messageInput').val().length > 0){
      $('#send-button').css({
        "background":"#fad0c4" });
    }else{
       $('#send-button').css({
        "background":"white" });
    }
  }
  
  render ()
   { return (
      <div className="Conversation">
        <Header name="Public Chatroom" />
        <div className="container">
          <Messages messages={this.props.messages} thisUser={this.props.thisUser} />
        </div>
        <input
          className="messageInput"
          name="message"
          type="text"
          placeholder="type something"
          onChange={this.onChange}
        />
        <button id="send-button" onClick={this.props.onSubmit}>
          <i data-feather="send" />
        </button>
      </div>
    );
  }
}

//Profile
var Profile = props => {
  var prevchats = props.prevChats.map(function(chat, i) {
    return <PastChat lastText={chat.lastText} sender={chat.sender} />;
  });
  return (
    <div className="Profile">
      <div className="top-half">
      <h1>{props.thisUser ? props.thisUser.name : ""} </h1>
      <p className="email">{props.thisUser ? props.thisUser.email : ""}</p>
      <img className="profileImage main" src={props.profileImage} />
      <div className="icons">
        <a href="#"><i data-feather="alert-circle" /></a>
         <a href="#" className="active"><i data-feather="message-circle" /></a>
         <a href="#"><i data-feather="home" /></a>
         <a href="#"><i data-feather="activity" /></a>
      </div>
      </div>
      <div className="prev-chats">{prevchats}</div>
    </div>
  );
};

var PastChat = props => {
  return (
    <div className="prev-chat">
      <img className="profileImage" src={props.sender.profileImage} />
      <h2>{props.sender.name}</h2>
      <p>{props.lastText}</p>
    </div>
  );
};

//Header
var Header = props => {
  return (
    <header>
      <i data-feather="chevron-left" />
      <div className="name">{props.name}</div>
    </header>
  );
};


//Messages
var Messages = props => {
  let messages=[];
  for (var key in props.messages){
    var message = props.messages[key];
    messages.push(
       <Message
        message={message.message}
        sender={message.sender}
        thisUser={props.thisUser}
      />
    );
  }

  return <div className="Messages">{messages}</div>;
};

//Message
var Message = props => {
  var classNames = "";
  if (props.thisUser && props.sender.name == props.thisUser.name && props.sender.email == props.thisUser.email ) {
    classNames = "Message you";
  } else {
    classNames = "Message them";
  }

  return (
      <div className={classNames}>
      <span>{props.message}</span>
      <p>{props.sender.name}</p>
    </div>
  );
};

//Render
ReactDOM.render(<App />, document.getElementById("app"));

feather.replace();
